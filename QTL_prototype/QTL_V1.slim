// set up a simple neutral simulation
initialize()
{
	//make it nucleotide based
	defineConstant("L", 1e6);
	initializeSLiMOptions(nucleotideBased=T);
	initializeAncestralNucleotides(randomNucleotides(L));
	
	// mutation types
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0); // Neutral
	initializeMutationTypeNuc("m2", 0.5, "n", 0.0, 0.5); // QTLs
	
	// m2 mutations should not be converted to substitutions on fixation
	m2.convertToSubstitution = F;
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", c(m1, m2), c(0.999, 0.001), mmJukesCantor((1e-7) / 3));
	
	// uniform chromosome of length 1 mb with uniform recombination
	initializeGenomicElement(g1, 0, L - 1);
	initializeRecombinationRate(1e-8);
}

mutationEffect(m2)
{
	return 1.0;
}

1 early()
{
	sim.addSubpop("p1", 500); //add population of 500 ind
}

1: late()
{
	inds = sim.subpopulations.individuals;
	phenotypes = inds.sumOfMutationsOfType(m2);
	scale = dnorm(5.0, 5.0, 1.0);
	inds.fitnessScaling = 1.0 + dnorm(phenotypes, 5.0, 1.0) / scale;
	catn(c("Mean Phenotype:", mean(phenotypes)));
}

1: late()
{
	phenotypes = sim.subpopulations.individuals.sumOfMutationsOfType(m2);
	if (mean(phenotypes) > 5.0)
	{
		defineGlobal("tick", community.tick);
		community.rescheduleScriptBlock(s1, start=tick + 1, end=tick + 1);
		community.deregisterScriptBlock(self);
	}
}

s1 1000000 late() //script to start measuring LD
{
	print(community.tick);
}